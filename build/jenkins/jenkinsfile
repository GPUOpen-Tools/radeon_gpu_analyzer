//groovy
// Copyright (c) 2021-2022 Advanced Micro Devices, Inc. All rights reserved.
// jenkins/pipeline/jenkinsfile: builds and archives all the RDP artifacts.

// Options set by the job configuration parameters or by environment variables.
// If using parameters, manual invocation requires two clicks (build with parameters, verify parameters and build)

import static groovy.io.FileType.*
import static groovy.io.FileVisitResult.*

// Set some constants and other variables
kMaxBuilds = 60
kMaxDays = 30

// Define the repo and project (not necessarily the same all the time)
repoName = "radeon_gpu_analyzer"
projName = "RGA"

// The default repoBranch. This is actually not used, and the branch cannot be changed by the script,
// with enterprise github based jobs.
repoBranch = "amd-main"

// Define the downstream jobs to run. This can be changed in the environment. This can also be called
// on any other branch for now.
cliTestJob = "rga_test_cli"
guiTestJob = "rga_test_gui"
testJob = ""

// And the packaging job
rdtsPackagingJob = "rdts-mainline-package"

kServer = Artifactory.server ('DevToolsBDC')
kArtifactoryPath = "http://bdcartifactory.amd.com/artifactory/DevToolsBDC/Builds"

// Can be changed with an env var, if testing a modification to the JenkinsToolsLib.gvy script.
commonScriptsBranch = "amd-main"
kCommonScriptsUrl = "git@github.amd.com:Developer-Solutions/scripts"

jTools = null

// Default node labels. If you want a specific node to do the build, use an environment variable.
// If you want a subset of nodes to be used for the build, create a new label for those (in the machine
// configuration page) and then pass that label. See the setupJobVars() section.

ubuntuBuildLabel = 'BLD-U1804'
winBuildLabel = 'BLD-WIN10'
workNodeLabel = 'BLD-U1804-VM'

skipWin = false
skipUbuntu = false
skipRdtsPackage = false
skipTests = false
guiTestOptionL = ""
guiTestOptionW = ""

emailRecipFail = ""
emailRecipSuccess = ""

// The stashes, to use when uploading to artifactory when finished
stashNameWindows = "winRGApkg${BUILD_NUMBER}"
stashNameUbuntu = "ubuRGApkg${BUILD_NUMBER}"
stashNameWindowsInstaller = "winRGAmsi${BUILD_NUMBER}"
linuxStashExists = false
winStashExists = false
msiStashExists = false
packageBuildNumber = "${BUILD_NUMBER}"

// Set these as a global, so that they can be used for describing the artifacts (build machines used)
winAgentName = ""
ubuAgentName = ""
rgaInternalBranch = ""

// Set up the commands and the branches to be used, depending upon how the job is invoked
// if the parent job is associated with a particular branch, or if it's triggered, then process
// this information here.
def setupJobVars() {
    if (env.WORK_NODE) {
        workNodeLabel = WORK_NODE
    }
    node (workNodeLabel) {
        if (env.WIN_BLD_NODE) {
            winBuildLabel = WIN_BLD_NODE
        }
        if (env.LNX_BLD_NODE) {
            ubuntuBuildLabel = LNX_BLD_NODE
        }
        // Defaults for RGA build
        skipWin = false
        skipCentos = false
        guiTestOption = ""
        // toggle the booleans to true for individual builds with these variables in the env. settings in jenkins
        // 1 == true, 0 == false (use 1 or 0, not true/false)
        if (env.SKIPWIN) {
            skipWin = true
        }

        if (env.SKIPUBUNTU) {
            // set this to true, if we're only building the one platform, and ubuntu vs. centos isn't material.
            skipUbuntu = true
        }

        // Check for internal build
        if (env.GUITESTBUILD) {
            guiTestOptionL = "--automation"
            guiTestOptionW = "automation"
        }

        // Configure the downstream RDTS packaging job.
        if (env.RDTSPACKAGINGJOB) {
            packagingJob = RDTSPACKAGINGJOB
        } else {
            // Build the amd-master branch package.
            packagingJob = "rdts-mainline-package"
        }

        // If this is set, skip the packaging.
        if (env.SKIPRDTSPACKAGE) {
            if (! env.SKIPRDTSPACKAGE == false) {
                skipRdtsPackage = true
            }
        }

        // if there's an environment setting in the job for repoBranch and email recipients, not the default setting.
        // BRANCH_NAME is also defined by the multibranch job triggering.
        if (env.BRANCH_NAME) {
            repoBranch = BRANCH_NAME
        }
        echo "INFO: Triggering branch: ${repoBranch}"

        // Set the retention values for PR- builds to be lower than for branch builds
        if (repoBranch.startsWith("PR-")) {
            kMaxBuilds = 5
            kMaxDays = 5
            skipRdtsPackage = true
        }

        // Set the retention values for amd-main to be 90 days, 150 builds.
        if (repoBranch == "amd-main") {
            kMaxBuilds = 90
            kMaxDays = 150
        }

        // Similarly, for dev- branches (presumably created for development branches)
        def devMatchPattern = /[Dd][Ee][Vv][_-]/
        if (repoBranch.startsWith(devMatchPattern)) {
            kMaxBuilds = 5
            kMaxDays = 5
            skipRdtsPackage = true
        }

        // Set up the test kit job to be invoked.
        if (env.GUITESTBUILD) {
            testJob = guiTestJob
        } else {
            testJob = cliTestJob
        }
        if (env.TESTJOB) {
            testJob = TESTJOB
        }

        // Configure e-mail notifications.
        if (env.NOTIFY_FAIL) {
            emailRecipFail = NOTIFY_FAIL
        }
        if (params.NOTIFY_FAIL) {
            emailRecipFail = "${params.NOTIFY_FAIL}"
        }
        if (env.NOTIFY_SUCCESS) {
            emailRecipSuccess = NOTIFY_SUCCESS
        }
        if (params.NOTIFY_SUCCESS) {
            emailRecipSuccess = "${params.NOTIFY_SUCCESS}"
        }

        // toggle to false to force skipping the test job runs.
        if (env.SKIPTESTS) {
            skipTests = env.SKIPTESTS
        }
        if (params.SKIPTESTS) {
            skipTests = "${params.SKIPTESTS}"
        }

        // If needing to test a change to JenkinsToolsLib.gvy, on a branch
        if (env.COMMONSCRIPTSBRANCH) {
            commonScriptsBranch = COMMONSCRIPTSBRANCH
        }
    }
}


// Check out, then load the script that contains functions that can be used in many projects.
def setupTools() {
    node (workNodeLabel) {
        def jenkinsToolsLinux = "scripts/lab_tools/Jenkins/Generic/JenkinsToolsLib.gvy"
        def jenkinsToolsWindows = "scripts\\lab_tools\\Jenkins\\Generic\\JenkinsToolsLib.gvy"
        def jenkinsTools
        def loadedTools
        if (isUnix()) {
            jTools = jenkinsToolsLinux
        } else {
            jTools = jenkinsToolsWindows
        }

        // Update or clone Developer-Solutions/scripts repo.
        dir ('scripts') {
            git branch: "${commonScriptsBranch}", url: "${kCommonScriptsUrl}"
        }

        // Load the script.
        try {
            loadedTools = load(jTools)
        } catch (Exception err) {
            echo "ERROR: Could not load "+ jTools
            echo err
            throw err
        }

        return loadedTools
    }
}


def cloneRepos() {
    rgaRepo = 'radeon_gpu_analyzer'
    rgaInternalRepo = 'rga_internal_utils'
    rgaBranch = repoBranch
    if (repoBranch.startsWith('PR-')) {
        branchParts = repoBranch.split('-')
        rgaBranch = branchParts[1]
    }

    // Remove RGA-Internal if it still exists.
    if (fileExists("RGA-Internal")) {
        dir( "RGA-Internal") {
            deleteDir()
        }
    } 

    // Clone radeon_gpu_analyzer repository.
    try {
        dir ('radeon_gpu_analyzer') {
            checkout scm
        }
    } catch (Exception err) {
        echo "ERROR: Unable to clone the RGA AMD github repo: " + err
        throw err
    }
    echo "INFO: radeon_gpu_analyzer repo cloned"

    // Clone rga_internal_utils repository, start with branch amd-main.
    dir('rga_internal_utils') {
        try {
            checkout resolveScm(source: [$class: 'GitSCMSource',
                                         remote: 'git@github.amd.com:Developer-Solutions/rga_internal_utils',
                                         traits: [gitBranchDiscovery()]],
                                targets: [BRANCH_NAME, 'amd-main'])
            if (isUnix()) {
                // Only need to get the revision info for the build description once.
                rgaInternalBranch = "${sh(script:'git name-rev --name-only HEAD', returnStdout: true)}"
            }
        } catch (Exception err) {
            echo "ERROR: Unable to clone the rga_internal_utils github repo: " + err.toString()
            throw err
        }
    }
    echo "INFO: rga_internal_utils repo cloned."
}


// Define the steps to be run on the Ubuntu machine to build and package RGA.
def buildLinux() {
    node (ubuntuBuildLabel) {
        // build variables.
        ubuAgentName = "${env.NODE_NAME}"

        echo "INFO: Building on ${env.NODE_NAME}"
        currentBuild.result = 'SUCCESS'

        // check out the code, using the variables  defined above. Defaults to amd-master where variables
        // exist. Allow for branches like amd-v2.3 to be built, based on the name of the calling script.
        stage('Ubuntu Build') {
            // Clone or update radeon_gpu_analyzer and rga_internal_utils repositories.
            try {
                cloneRepos()
            } catch (Exception e) {
                echo "ERROR: Unable to clone the repos on $ubuAgentName."
                throw e
            }

            // Delete output of previous build.
            sh """
                set +e
                find . -name '*.tgz' | xargs rm
                # temporary during transition to github.amd.com.
                rm -rf Common/Src/DeviceInfo
                rm -rf Common/Src/update_check_api
                rm -rf Common/Src/DynamicLibraryModule
                rm -rf radeon_gpu_analyzer/build_output
                rm -rf radeon_gpu_analyzer/BuildOutput
                rm -rf radeon_gpu_analyzer/output
                rm -rf radeon_gpu_analyzer/Output
                rm -f rga_internal_utils/tests/*.zip
                rm -r rga_internal_utils/tests/black_box/*.zip
                rm -rf VKLayerRGA-*
                if [ -d 'radeon_gpu_analyzer/build/linux' ]; then
                    cd radeon_gpu_analyzer/build
                    ./prebuild.sh --clean
                fi
            """

            // Linux Download specification.
            def downloadSpecL = """ {
                "files": [
                    {
                        "pattern": "DevToolsBDC/Builds/RGA/*tgz",
                        "build": "RGA-Layer/LATEST",
                        "exclusions": [
                                "Centos",
                                "Windows"
                                ],
                        "flat": "true"
                    },
                    {
                        "pattern": "DevToolsBDC/Builds/RGA/*so",
                        "build": "rga-driver-lib-leak-check/LATEST",
                        "target": "radeon_gpu_analyzer/output/release/bin/utils/vulkan/amdvlk/",
                        "flat": "true"
                    },
                    {
                        "pattern": "DevToolsBDC/Assets/RGA/TestData/rga_cli_test_data.zip",
                        "target": "rga_internal_utils/tests/black_box/",
                        "flat": "true"
                    },
                    {
                        "pattern": "DevToolsBDC/Assets/RGA/TestData/rga_gui_test_data.zip",
                        "target": "rga_internal_utils/tests/",
                        "flat": "true"
                    }
                ]
            } """
            sh "mkdir -p radeon_gpu_analyzer/output/release/bin/utils/vulkan/amdvlk"
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: " ERROR: Download of Linux amdvlk library or VKLayerLauncher failed.") {
                kServer.download spec: downloadSpecL
            }

            if (env.GUITESTBUILD) {
                echo "INFO: Building the RGA GUI test application"
            } else {
                echo "INFO: Building the RGA applications"
            }
            catchError(stageResult: 'FAILURE', buildResult: 'FAILURE', message: 'There was a problem building on ' + ubuAgentName) {
                sh """
                    set -x
                    bash -e $WORKSPACE/rga_internal_utils/build/jenkins_scripts/linux/jenkins_build_rga.sh ${guiTestOptionL} > $WORKSPACE/ubuntu_build.log 2>&1
                    if [ \$? != 0 ]; then
                        echo 'ERROR: Ubuntu build script failed!'
                        exit \$?
                    fi
               """
            }

            // Create release and test packages.
            if (env.GUITESTBUILD) {
                echo "INFO: Creating RGA GUI test kit"
            } else {
                echo "INFO: Creating RGA release kit"
            }
            catchError(stageResult: 'FAILURE', buildResult: 'FAILURE', message: 'There was a problem building on ' + ubuAgentName) {
                sh """
                    set -x
                    bash -e $WORKSPACE/rga_internal_utils/build/jenkins_scripts/linux/jenkins_rga_pkg.sh ${guiTestOptionL}
                    if [ \$? != 0 ]; then
                        echo 'ERROR: Ubuntu release package script failed!'
                        exit \$?
                    fi
               """
            }

            if (!env.GUITESTBUILD) {
                echo "INFO: Create CLI testkit for downstream CLI test job."
                catchError(stageResult: 'FAILURE', buildResult: 'FAILURE', message: 'There was a problem building on ' + ubuAgentName) {
                    sh """
                        set -x
                        bash -e $WORKSPACE/rga_internal_utils/build/jenkins_scripts/linux/jenkins_package_cli_testkit.sh
                        if [ \$? != 0 ]; then
                            echo 'ERROR: Ubuntu CLI test kit package script failed!'
                            exit \$?
                        fi
                   """
                }
            }

            // Take the resulting bits and archive them
            echo "INFO: stash name is " + stashNameUbuntu
            linuxStashExists = false
            try {
                stash includes: "rga*.tgz,*.log", name: stashNameUbuntu
                linuxStashExists = true
            } catch (Exception err) {
                echo "ERROR: There was a problem stashing the tgz files" + err
                currentBuild.result = 'FAILURE'
            }
        }
    }
}


// Define the steps to be run on the Windows machine.
def buildWindows() {
    node (winBuildLabel) {
        // set up windows parameters.
        scriptsWindows = "${WORKSPACE}\\rga_internal_utils\\build\\jenkins_scripts\\windows\\"
        winAgentName = "${env.NODE_NAME}"
        echo "INFO: Building on ${winAgentName}"
        currentBuild.result = 'SUCCESS'
        stage("Windows Build") {
            // Define the cloning to be done.
            try {
                cloneRepos()
            } catch (Exception e) {
                echo "ERROR: Unable to clone the repo on $winAgentName"
                throw e
            }

            // Delete output of previous build.
            try {
                bat """
                    echo on
                    del /s /f /q *.zip
                    del /s /f /q *.msi
                    for /f %i in ('dir /a:d /b VKLayerRGA-*') do rd /s /q %i
                    rmdir /s /q radeon_gpu_analyzer\\build_output
                    rmdir /s /q radeon_gpu_analyzer\\BuildOutput
                    exit /b 0
                """
                // Handle changes in source url.
                dir ('Common/Src/DeviceInfo') {
                    deleteDir()
                }
                dir ('Common/Src/update_check_api') {
                    deleteDir()
                }
                dir ('Common/Src/DynamicLibraryModule') {
                    deleteDir()
                }
            } catch (Exception e) {
                echo "ERROR: System encountered a problem deleting old package files."
            }
            try {
                bat """
                    echo on
                    if exist radeon_gpu_analyzer\\build\\windows (
                        cd radeon_gpu_analyzer\\build
                        call prebuild.bat --clean
                    )
                """
            } catch (Exception e) {
                echo "ERROR: System encountered a problem during workspace cleanup of old build files."
            }

            // Windows Download specifications for VKLayer and  amdvlk.
            def downloadSpecW = """ {
                "files": [
                    {
                        "pattern": "DevToolsBDC/Builds/RGA/*zip",
                        "build": "RGA-Layer/LATEST",
                        "flat": "true"
                    },
                    {
                        "pattern": "DevToolsBDC/Builds/RGA/*amdvlk*dll",
                        "build": "rga-driver-lib-leak-check/LATEST",
                        "target" : "radeon_gpu_analyzer\\build_output\\bin\\utils\\vulkan\\amdvlk\\",
                        "flat": "true"
                    },
                    {
                        "pattern": "DevToolsBDC/Builds/RGA/*amdxc*dll",
                        "build": "rga-driver-lib-leak-check/LATEST",
                        "target" : "radeon_gpu_analyzer\\build_output\\bin\\utils\\dx12\\amdxc\\",
                        "flat": "true"
                    },
                    {
                        "pattern": "DevToolsBDC/Assets/SignedQT/qt5.15.2_signed_rga.zip",
                        "flat": "true"
                    },
                    {
                        "pattern": "DevToolsBDC/Assets/RGA/TestData/rga_cli_test_data.zip",
                        "target": "rga_internal_utils\\tests\\black_box\\",
                        "flat": "true"
                    },
                    {
                        "pattern": "DevToolsBDC/Assets/RGA/TestData/rga_gui_test_data.zip",
                        "target": "rga_internal_utils\\tests\\",
                        "flat": "true"
                    }
                ]
            } """
            bat """
                if not exist radeon_gpu_analyzer\\build_output\\bin\\utils\\vulkan\\amdvlk\\ (
                    mkdir radeon_gpu_analyzer\\build_output\\bin\\utils\\vulkan\\amdvlk
                )
                if not exist radeon_gpu_analyzer\\build_output\\bin\\utils\\dx12\\amdxc\\ (
                    mkdir radeon_gpu_analyzer\\build_output\\bin\\utils\\dx12\\amdxc
                )
            """
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: "ERROR: Download of Windows amdvlk library or VkLayerLauncher failed.") {
                kServer.download spec: downloadSpecW
            }

            // Build applications, libraries, and documentation for RGA.
            catchError(stageResult: 'FAILURE', buildResult: 'FAILURE', message: "ERROR: There was a problem building for Windows") {
                if (!env.GUITESTBUILD) {
                    echo "INFO: Building RGA application for release"
                } else {
                    echo "INFO: The GUITESTBUILD option: ${env.GUITESTBUILD}, so guiTestOptionW is ${guiTestOptionW}"
                }
                withEnv(["_MSPDBSRV_ENDPOINT_=${BUILD_TAG}"]) {
                    bat """
                        echo on
                        set MSBUILDDEBUGPATH=%WORKSPACE%
                        call ${scriptsWindows}\\jenkins_build_rga.bat 2022 ${guiTestOptionW} 2>&1 > %WORKSPACE%\\win_build.log
                        if %ERRORLEVEL% NEQ 0 (
                            echo ERROR: Windows build script failed
                            exit /b 1
                        )
                        cd "${WORKSPACE}"
                    """
                }
            }

            // Create packages.
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE', message: "ERROR: Package of Windows RGA failed.") {
                bat """
                    echo on
                    call ${scriptsWindows}\\jenkins_rga_pkg.bat ${guiTestOptionW}
                    if not %ERRORLEVEL% == 0 (
                        echo ERROR: Windows package script failed
                        exit /b 1
                    )
                """
                if (!env.GUITESTBUILD)
                {
                    if (!repoBranch.startsWith("PR-"))
                    {
                        bat """
                            echo on
                            cd %WORKSPACE%
                            call ${scriptsWindows}\\jenkins_rga_msi.bat
                        """
                    }
                    bat """
                        echo on
                        cd %WORKSPACE%
                        call ${scriptsWindows}\\jenkins_package_cli_testkit.bat
                    """
                 }
            }

            winStashExists = false
            try {
                if (!env.GUITESTBUILD) {
                    if (!repoBranch.startsWith("PR-")) {
                        msiStashExists = true
                        stash name: stashNameWindowsInstaller, includes: "radeon_gpu_analyzer/installer/*.msi"
                    }
                    stash name: stashNameWindows, includes: "radeon_gpu_analyzer/build_output/RGA-*.zip,RGA-*CLITests*.zip,*.log"
                } else {
                    stash name: stashNameWindows, includes: "radeon_gpu_analyzer/build_output/RGA-*.zip,*.log"
                }
                winStashExists = true
            } catch (Exception err) {
                echo "ERROR: There was a problem stashing the windows artifact files" + err
                currentBuild.result = 'FAILURE'
            }
        }
    }
}


// Take all the stashed build results, and save them to one place under their own subdirectories.
def unstashAll() {
    // First, make sure that the directory is empty in all stash folders. This will assure that any artifacts from
    // old runs where OS builds were done aren't included in the artifacts for a run where an OS was skipped.
    dir ("Windows") {
        deleteDir()
    }
    dir ("Ubuntu") {
        deleteDir()
    }
    // unstash the tgz and zip files
    if (!skipWin) {
        if (winStashExists) {
            try {
                echo "INFO: Unstashing the full package for windows."
                dir("Windows") {
                    unstash stashNameWindows
                    if (!env.GUITESTBUILD) {
                        if (msiStashExists) {
                            unstash stashNameWindowsInstaller
                        }
                    }
                }
            } catch (Exception eStash) {
                echo "ERROR: windows stash was not found."
                throw eStash
            }
        }
    }
    if (!skipUbuntu) {
        if (linuxStashExists) {
            try {
                dir("Ubuntu") {
                    echo "INFO: Unstashing the full Ubuntu package"
                    unstash stashNameUbuntu
                }
            } catch (Exception eStash) {
                echo "ERROR: Ubuntu stash was not found."
                throw eStash
            }
        }
    }
}


// After unstashing the build results, save them to artifactory.
def archivePackages() {
    node (workNodeLabel) {
        // Unstash the various bits.
        unstashAll()
        // Set up the artifactory upload definitions.
        def buildInfo = Artifactory.newBuildInfo()
        buildInfo.env.capture = true
        buildInfo.number = BUILD_NUMBER
        buildInfo.retention maxBuilds: kMaxBuilds, maxDays: kMaxDays, deleteBuildArtifacts: true
        def uploadSpec = ""
        if (!env.GUITESTBUILD) {
            if (msiStashExists) {
                uploadSpec = """ {
                    "files": [
                        {
                          "pattern": "Windows/*.log",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Windows/"
                        },
                        {
                          "pattern": "Windows/radeon_gpu_analyzer/build_output/RGA-*.zip",
                          "props": "type=gui_zip",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Windows/",
                          "flat": "true"
                        },
                        {
                          "pattern": "Windows/RGA-*CLITests*.zip",
                          "props": "type=cli_zip",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Windows/"
                        },
                        {
                          "pattern": "Windows/radeon_gpu_analyzer/installer/*.msi",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Windows/",
                          "flat": "true"
                        },
                        {
                          "pattern": "Ubuntu/rga-*.tgz",
                          "props": "type=linux_tgz",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Ubuntu/"
                        },
                        {
                          "pattern": "Ubuntu/*.log",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Ubuntu/"
                        }
                    ]
                } """
            } else {
                uploadSpec = """ {
                    "files": [
                        {
                          "pattern": "Windows/*.log",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Windows/"
                        },
                        {
                          "pattern": "Windows/radeon_gpu_analyzer/build_output/RGA-*.zip",
                          "props": "type=gui_zip",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Windows/",
                          "flat": "true"
                        },
                        {
                          "pattern": "Windows/RGA-*CLITests*.zip",
                          "props": "type=cli_zip",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Windows/"
                        },
                        {
                          "pattern": "Ubuntu/rga-*.tgz",
                          "props": "type=linux_tgz",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Ubuntu/"
                        },
                        {
                          "pattern": "Ubuntu/*.log",
                          "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Ubuntu/"
                        }
                    ]
                } """
            }
        } else {
            uploadSpec = """ {
                "files": [
                    {
                      "pattern": "Windows/*.log",
                      "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Windows/"
                    },
                    {
                      "pattern": "Windows/radeon_gpu_analyzer/build_output/RGA-*.zip",
                      "props": "type=gui_zip",
                      "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Windows/",
                      "flat": "true"
                    },
                    {
                      "pattern": "Ubuntu/rga*.tgz",
                      "props": "type=linux_tgz",
                      "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Ubuntu/"
                    },
                    {
                      "pattern": "Ubuntu/*.log",
                      "target": "DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}/Ubuntu/"
                    }
                ]
            } """
        }

        // Upload to artifactory
        echo "INFO: Uploading linux and windows artifacts (if none were skipped)."
        try {
            kServer.upload spec: uploadSpec, buildInfo: buildInfo, failNoOp: false
            kServer.publishBuildInfo buildInfo
        } catch (Exception eUploadProj) {
            echo "ERROR: Unable to archive the artifacts for ${JOB_NAME}"
            throw eUploadProj
        }
        writeBuildInfoToJenkins()
    }
}


// Note: this should be done on the same node as the artifacts are uploaded from to avoid having to unstash
// them again, so call in the uploadArtifacts function.
def writeBuildInfoToJenkins() {

    def httpPath = "http://bdcartifactory.amd.com/artifactory/DevToolsBDC/Builds/RGA/${JOB_NAME}/${BUILD_NUMBER}"
    def description = "Built using : RGA branch $repoBranch, rga_internal_utils branch $rgaInternalBranch<br>" +
        "Built on: $ubuAgentName and $winAgentName<br>"

    // Set the build description text.
    if (!env.GUITESTBUILD) {
        description = description +
            jTools.create_build_description(httpPath, "Windows", 'RGA-*.msi')
    }
    description = description  +
            jTools.create_build_description(httpPath, "Windows", 'RGA-*.zip') +
            jTools.create_build_description(httpPath, "Windows", '*.log') +
            jTools.create_build_description(httpPath, "Ubuntu", 'rga-*.tgz') +
            jTools.create_build_description(httpPath, "Ubuntu", '*.log')

    currentBuild.setDescription(description)
}


// Trigger downstream jobs.
def downstreamJobs() {
    node('BLD-LINUX-VM') {
        def downstream_jobs = []
        def devtools_ci = "${JENKINS_URL}/job/"
        def downstream_info = "Downstream Jobs:"

        if (!env.GUITESTBUILD) {
            // Trigger the RDTS packaging job.
            if (!env.SKIPRDTSPACKAGE) {
                if (jTools.check_is_buildable(rdtsPackagingJob)) {
                    def rdtsResult = build job: rdtsPackagingJob, wait: false,
                        parameters: [[$class: 'StringParameterValue', name: 'RGA_JOB', value: "RGA/rga_build/${BRANCH_NAME}"],
                                     [$class: 'StringParameterValue', name: 'RGA_JOB_BUILDNUM', value: "${BUILD_NUMBER}"]]
                    rdtsJob = "${devtools_ci}${rdtsPackagingJob}"
                    if (rdtsResult != null) {
                        downstream_info = downstream_info + "<br><a href=${rdtsJob}/" + rdtsResult.getNumber() + "> ${rdtsJob}/" + rdtsResult.getNumber() + "</a>"
                    } else {
                        downstream_info = downstream_info + "<br><a href=${rdtsJob}> ${rdtsJob} </a>"
                    }
                } else {
                    echo "INFO: RDTS packaging job ${rdtsPackagingJob} doesn't exist or is not enabled.  No job will be triggered for RDTS."
                }
            }
        }

        // Trigger the test job.
        if (jTools.check_is_buildable(testJob)) {
            def testJobResult = build job: testJob, wait: false,
                parameters: [[$class: 'StringParameterValue', name: 'UPSTREAMBUILDNAME', value: "rga_build/${BRANCH_NAME}"],
                             [$class: 'StringParameterValue', name: 'UPSTREAMBUILDNUMBER', value: BUILD_NUMBER]]
            if (testJobResult != null) {
                testJobUrl = "${devtools_ci}${testJob}/" + testJobResult.getNumber()
                echo "INFO: ${testJob} exited with status ${testJobResult.result}"
                downstream_info = downstream_info + "<br><a href=${testJobUrl}> ${testJobUrl}</a>"
            } else {
                testJobUrl = "${devtools_ci}${testJob}"
                downstream_info = downstream_info + "<br><a href=${testJobUrl}> ${testJobUrl}</a>"
            }
        } else {
            echo "INFO: Test job ${testJob} doesn't exist or is not enabled. No tests will be run."
        }

        build_description = currentBuild.getDescription() + downstream_info
        currentBuild.setDescription(build_description)
    }
}

// The pipeline for the RDP Build jobs, all permutations.
pipeline {
    agent none
    options {
        buildDiscarder(logRotator(
            daysToKeepStr: '90'
        ))
    }
    stages {
        stage ('Initialize things') {
            // Load the tools library and from Developer-Solutuions/scripts, and set the job variables.
            steps {
                script {
                    echo "INFO: setting jTools"
                    jTools = setupTools()
                    echo "INFO: setting job vars"
                    setupJobVars()
                }
            }
        }
        stage ('Build') {
            // Build Ubuntu, and Windows packages in parallel.
            parallel {
                stage('Ubuntu') {
                    steps {
                        script {
                            if (!skipUbuntu) {
                                buildLinux()
                            }
                        }
                    }
                }
                stage('Windows') {
                    steps {
                        script {
                            if (!skipWin) {
                                buildWindows()
                            }
                        }
                    }
                }
            }
        }

        stage ('Archive artifacts') {
            // On one node, extract all the stashes and create the archives for artifactory, then upload them.
            steps {
                script {
                    // If any packages created, archive them to Artifactory.
                    archivePackages()
                }
            }
        }
    }
    post {
        failure {
            node (workNodeLabel) {
                // if there's a list of interested parties for failure, let them know.
                script {
                    echo "ERROR: The RGA build or package failed"
                    if (emailRecipFail != "") {
                        jTools.notifyFailed(emailRecipFail)
                    }
                }
            }
        }
        success {
            node (workNodeLabel) {
                script {
                    echo "INFO: Trigger downstream jobs"
                    downstreamJobs()

                    // similarly, if there's a list of people who want to know that it succeeded.
                    if (emailRecipSuccess != "") {
                        jTools.notifySuccessful(emailRecipSuccess)
                    }
                }
            }
        }
    }
}

