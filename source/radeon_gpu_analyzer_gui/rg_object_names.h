//=============================================================================
/// Copyright (c) 2020-2025 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Header for Object names for PSO editor objects (RgPipelineStateModelVulkan.cpp)
//=============================================================================

#ifndef RGA_RADEONGPUANALYZERGUI_INCLUDE_RG_OBJECT_NAMES_H_
#define RGA_RADEONGPUANALYZERGUI_INCLUDE_RG_OBJECT_NAMES_H_

// Object names for PSO editor objects (RgPipelineStateModelVulkan.cpp) - START
// String constants.
static const char* kStrAlphaBlendOpNode = "pAlphaBlendOpNode";
static const char* kStrAlphaBlendToCoverageNode = "pAlphaToCoverageNode";
static const char* kStrAlphaToOneNode = "pAlphaToOneNode";
static const char* kStrArrayElement = "pArrayElement";
static const char* kStrAttachmentCountItem = "pAttachmentCountItem";
static const char* kStrAttachmentNode = "pAttachmentNode";
static const char* kStrAttachmentsRootItem = "pAttachmentsRootItem";
static const char* kStrBackStencilOpStateNode = "pBackStencilOpStateNode";
static const char* kStrBasePipelineIndexCreateInfo = "pBasePipelineIndexCreateInfo";
static const char* kStrBindingElement = "pBindingElement";
static const char* kStrBlendConstantNode = "pBlendConstantNode";
static const char* kStrBlendConstantsRootNode = "pBlendConstantsRootNode";
static const char* kStrBlendEnableNode = "pBlendEnableNode";
static const char* kStrColorAttachmentCountNode = "pColorAttachmentCountNode";
static const char* kStrColorAttachmentsRootItem = "pColorAttachmentsRootItem";
static const char* kStrColorBlendAttachementStateCountItem = "pColorBlendAttachmentStateCountItem";
static const char* kStrColorBlendOpNode = "pColorBlendOpNode";
static const char* kStrColorBlendStateRoot = "pColorBlendStateRoot";
static const char* kStrCompareMaskNode = "pCompareMaskNode";
static const char* kStrCompareOpNode = "pCompareOpNode";
static const char* kStrColorComponentWriteMask = "pColorComponentWriteMask";
static const char* kStrCreateInfoRootNode = "pCreateInfoRootNode";
static const char* kStrCullModeNode = "pCullModeNode";
static const char* kStrDependenciesRootItem = "pDependenciesRootItem";
static const char* kStrDependencyDescriptionCountItem = "pDependencyDescriptionCountItem";
static const char* kStrDependencyFlags = "pDependencyFlags";
static const char* kStrDepthBiasClampNode = "pDepthBiasClampNode";
static const char* kStrDepthBiasConstantFactorNode = "pDepthBiasConstantFactorNode";
static const char* kStrDepthBiasEnableNode = "pDepthBiasEnableNode";
static const char* kStrDepthBiasSlopeFactorNode = "pDepthBiasSlopeFactorNode";
static const char* kStrDepthBoundsTestEnableNode = "pDepthBoundsTestEnableNode";
static const char* kStrDepthClampEnableItem = "pDepthClampEnableItem";
static const char* kStrDepthCompareOpNode = "pDepthCompareOpNode";
static const char* kStrDepthFailOp = "pDepthFailOp";
static const char* kStrDepthStencilAttachmentsRootItem = "pDepthStencilAttachmentsRootItem";
static const char* kStrDepthStencilStateRoot = "pDepthStencilStateRoot";
static const char* kStrDepthTestEnableNode = "pDepthTestEnableNode";
static const char* kStrDepthWriteEnableNode = "pDepthWriteEnableNode";
static const char* kStrDescriptorSetBindingCountItem = "pDescriptorSetBindingCountItem";
static const char* kStrDescriptionSetLayoutBindingCountNode = "pDescriptorSetLayoutBindingCountNode";
static const char* kStrDescriptorSetLayoutBindingIndexNode = "pDescriptorSetLayoutBindingIndexNode";
static const char* kStrDescriptorSetLayoutBindingsRootItem = "pDescriptorSetLayoutBindingsRootItem";
static const char* kStrDescriptorSetLayoutCountItem = "pDescriptorSetLayoutCountItem";
static const char* kStrDescriptorSetLayoutFlagsNode = "pDescriptorSetLayoutFlagsNode";
static const char* kStrDescriptorSetLayoutHandleNode = "pDescriptorSetLayoutHandleNode";
static const char* kStrDescriptorSetLayoutsItem = "pDescriptorSetLayoutsItem";
static const char* kStrDescriptorSetLayoutsRoot = "pDescriptorSetLayoutsRoot";
static const char* kStrDescriptorSetLayoutsRootItem = "pDescriptorSetLayoutsRootItem";
static const char* kStrDescriptorTypeNode = "pDescriptorTypeNode";
static const char* kStrDstAccessMask = "pDstAccessMask";
static const char* kStrDstAlphaBlendFactorNode= "pDstAlphaBlendFactorNode";
static const char* kStrDstColorBlendFactorNode = "pDstColorBlendFactorNode";
static const char* kStrDstStageMask = "pDstStageMask";
static const char* kStrDstSubpass = "pDstSubpass";
static const char* kStrExtentRoot= "pExtentRoot";
static const char* kStrFailOpNode = "pFailOpNode";
static const char* kStrFinalLayoutItem = "pFinalLayoutItem";
static const char* kStrFlags = "pFlags";
static const char* kStrFlagsElement = "pFlagsElement";
static const char* kStrFlagsItem = "pFlagsItem";
static const char* kStrFormatElement = "pFormatElement";
static const char* kStrFrontFaceNode = "pFrontFaceNode";
static const char* kStrFrontStencilOpStateNode = "pFrontStencilOpStateNode";
static const char* kStrGraphicsPipelineCreateInfoRoot = "pGraphicsPipelineCreateInfoRoot";
static const char* kStrHeightItem = "pHeightItem";
static const char* kStrInitialLayoutItem = "pIinitialLayoutItem";
static const char* kStrImageLayoutNode = "pImageLayoutNode";
static const char* kStrInputAssemblyStateRoot = "pInputAssemblyStateRoot";
static const char* kStrInputAttachmentCountNode = "pInputAttachmentCountNode";
static const char* kStrInputAttachmentsRootItem = "pInputAttachmentsRootItem";
static const char* kStrInputRateElement = "pInputRateElement";
static const char* kStrLineWidthNode = "pLineWidthNode";
static const char* kStrLoadOpItem = "pLoadOpItem";
static const char* kStrLocationElement = "pLocationElement";
static const char* kStrLogicOpEnableNode = "pLogicOpEnableNode";
static const char* kStrLogicOpNode = "pLogicOpNode";
static const char* kStrMaxDepthBoundsNode= "pMaxDepthBoundsNode";
static const char* kStrMaxDepthItem = "pMaxDepthItem";
static const char* kStrMinDepthBoundsNode = "pMinDepthBoundsNode";
static const char* kStrMinDepthItem = "pMinDepthItem";
static const char* kStrMinSampleShadingNode = "pMinSampleShadingNode";
static const char* kStrMultisampleStateRoot = "pMultisampleStateRoot";
static const char* kStrOffsetElement = "pOffsetElement";
static const char* kStrOffsetNode = "pOffsetNode";
static const char* kStrPassOpNode = "pPassOpNode";
static const char* kStrPatchControlPointsItem = "pPatchControlPointsItem";
static const char* kStrPipelineBindPointNode = "pPipelineBindPointNode";
static const char* kStrPipelineLayoutCreateInfoRoot = "pPipelineLayoutCreateInfoRoot";
static const char* kStrPolygonModeNode = "pPolygonModeNode";
static const char* kStrPreserveAttachmentCountNode = "pPreserveAttachmentCountNode";
static const char* kStrPreserveAttachmentNode = "pPreserveAttachmentNode";
static const char* kStrPreserveInputAttachmentRootItem = "pPreserveInputAttachmentsRootItem";
static const char* kStrPrimitiveRestartEnableItem = "pPrimitiveRestartEnableItem";
static const char* kStrPushConstantArrayRootItem = "pPushConstantsArrayRootItem";
static const char* kStrPushConstantsCountItem = "pPushConstantsCountItem";
static const char* kStrRasterizationSamples = "pRasterizationSamples";
static const char* kStrRasterizationStateRoot= "pRasterizationStateRoot";
static const char* kStrRasterizerDiscardEnable = "pRasterizerDiscardEnable";
static const char* kStrReferenceNode = "pReferenceNode";
static const char* kStrRenderPassCreateInfoRoot = "pRenderPassCreateInfoRoot";
static const char* kStrResolveAttachmentCountNode = "pResolveAttachmentCountNode";
static const char* kStrResolveAttachmentsRootItem = "pResolveAttachmentsRootItem";
static const char* kStrSampleMaskCountNode = "pSampleMaskCountNode";
static const char* kStrSampleMaskElementNode = "pSampleMaskElementNode";
static const char* kStrSampleMaskRootItem = "pSampleMaskRootItem";
static const char* kStrSampleShadingEnable = "pSampleShadingEnable";
static const char* kStrSamplesItem = "pSamplesItem";
static const char* kStrScissorCountItem = "pScissorCountItem";
static const char* kStrScissorsRootItem = "pScissorsRootItem";
static const char* kStrSizeNode = "pSizeNode";
static const char* kStrSrcAccessMask = "pSrcAccessMask";
static const char* kStrSrcAlphaBlendFactorNode = "pSrcAlphaBlendFactorNode";
static const char* kStrSrcColorBlendFactorNode = "pSrcColorBlendFactorNode";
static const char* kStrSrcStageMask = "pSrcStageMask";
static const char* kStrSrcSubpass = "pSrcSubpass";
static const char* kStrStageFlagsNode = "pStageFlagsNode";
static const char* kStrStencilLoadOpItem = "pStencilLoadOpItem";
static const char* kStrStencilStoreOpItem = "pStencilStoreOpItem";
static const char* kStrStencilTestEnableNode = "pStencilTestEnableNode";
static const char* kStrStoreOpItem = "pStoreOpItem";
static const char* kStrStrideElement = "pStrideElement";
static const char* kStrSubpassDescriptionCountItem = "pSubpassDescriptionCountItem";
static const char* kStrSubpassRootItem = "pSubpassRootItem";
static const char* kStrTessellationStateRoot = "pTessellationStateRoot";
static const char* kStrTopologyItem= "pTopologyItem";
static const char* kStrVertexAttributeDescriptionCountItem = "pVertexAttributeDescriptionCountItem";
static const char* kStrVertexAttributeDescriptionsItem = "pVertexAttributeDescriptionsItem";
static const char* kStrVertexBindingDescriptionCountItem = "pVertexBindingDescriptionCountItem";
static const char* kStrVertexBindingDescriptionsItem = "pVertexBindingDescriptionsItem";
static const char* kStrVertexInputStateRoot = "pVertexInputStateRoot";
static const char* kStrViewportCountItem = "pViewportCountItem";
static const char* kStrViewportStateRootItem = "pViewportStateRoot";
static const char* kStrViewportsRootItem = "pViewportsRootItem";
static const char* kStrVkComputePipelineCreateInfoRoot = "pVkComputePipelineCreateInfoRoot";
static const char* kStrWidthItem = "pWidthItem";
static const char* kStrWriteMaskNode = "pWriteMaskNode";
static const char* kStrXItem = "pXItem";
static const char* kStrYItem = "pYItem";
// Object names for PSO editor objects (RgPipelineStateModelVulkan.cpp) - END
#endif // RGA_RADEONGPUANALYZERGUI_INCLUDE_RG_OBJECT_NAMES_H_
