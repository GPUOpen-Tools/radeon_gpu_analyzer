//=================================================================
// Copyright 2020 Advanced Micro Devices, Inc. All rights reserved.
//=================================================================

#ifndef RGA_RADEONGPUANALYZERBACKEND_SRC_BE_PROGRAM_BUILDER_OPENCL_H_
#define RGA_RADEONGPUANALYZERBACKEND_SRC_BE_PROGRAM_BUILDER_OPENCL_H_

// C++.
#include <string>
#include <sstream>

// Local.
#include "radeon_gpu_analyzer_backend/be_program_builder.h"
#include "radeon_gpu_analyzer_backend/be_opencl_definitions.h"

#ifdef _WIN32
    #pragma warning(push)
    #pragma warning(disable : 4127)
    #pragma warning(disable : 4251)
#endif

using namespace std;
using namespace beKA;

class CElf;

class BeProgramBuilderOpencl : public BeProgramBuilder
{
public:
    virtual ~BeProgramBuilderOpencl(void);
    BeProgramBuilderOpencl() = default;

    // Get list of Kernels for devices.
    beKA::beStatus GetKernels(const std::string& device, std::vector<std::string>& kernels);

    // Get a binary representation of the program. The binopts parameter lets you customize the output object.
    // If empty, the complete object is returned.
    virtual beKA::beStatus GetBinary(const std::string& device, const beKA::BinaryOptions& binopts, std::vector<char>& binary);

    // Get a binary representation of the program encoded in the given file. The binopts parameter lets you customize the output object.
    // If empty, the complete object is returned.
    virtual beKA::beStatus GetBinaryFromFile(const std::string& path_to_binary, const beKA::BinaryOptions& binopts, std::vector<char>& output_path);

    // Retrieve statistics for a given kernel for the given device.
    virtual beKA::beStatus GetStatistics(const std::string& device, const std::string& kernel, beKA::AnalysisData& analysis);

    // Get version information of the OpenCL runtime.
    std::string GetOpenclVersionInfo() const;

    // Get IL disassembly for the given kernel for the given device.
    virtual beKA::beStatus GetKernelIlText(const std::string& device, const std::string& kernel, std::string& il) override;

    // Get ISA disassembly for the given kernel for the given device.
    virtual beKA::beStatus GetKernelIsaText(const std::string& device, const std::string& kernel, std::string& isa) override;

#ifdef _RGA_DEBUG_IL_ENABLED
    // Get ISA DebugIL for the given kernel for the given device.
    virtual beKA::beStatus GetKernelDebugIlText(const std::string& device, const std::string& kernel, std::string& debugil);
#endif // _RGA_DEBUG_IL_ENABLED

    // Get kernel metadata for the given kernel for the given device.
    virtual beKA::beStatus GetKernelMetaDataText(const std::string& device, const std::string& kernel, std::string& metadata);

    // Compile the specified source file.
    beKA::beStatus Compile(const std::string& program_source, const OpenCLOptions& ocl_options, const std::string& source_code_full_path_name,
                           const std::vector<std::string>* source_path, int& num_of_successful_builds);

    // Get a set of available devices.
    virtual beKA::beStatus GetDevices(std::set<string>& devices);

    // Get a sorted table of devices.
    // The entries are arranged by Hardware Generation, CAL Name, Marketing Name and Device ID.
    // Because the table is compiled into the tool, old versions of the tool may not have have an incomplete table
    // with respect to the list of CAL names generated by GetDevices. Users of this table will want to be careful
    // to make any additional, new, devices available to the user.
    beKA::beStatus GetDeviceTable(std::vector<GDT_GfxCardInfo>& table) override;

    // Retrieves the names of the supported public devices, as exposed by the OpenCL runtime.
    void GetSupportedPublicDevices(std::set<std::string>& devices) const;

    // Retrieves a mapping between device name and the Code Object disassembly.
    // This is only applicable for devices for whom the runtime compiler actually
    // generates a Code Object style binary.
    void GetDeviceToCodeObjectDisassemblyMapping(std::map<std::string, std::string>& mapping);

    // Extracts the statistics from a Code Object binary that has been generated for the device.
    // Returns true on success and false otherwise.
    bool ExtractStatisticsCodeObject(const std::string& device, std::map<std::string, beKA::AnalysisData>& stats);

protected:

    beKA::beStatus Initialize(const string& dll_module = "");

private:
    friend class Backend;

    // Get the text for the given kernel for the given device from the compiled binary.
    beKA::beStatus GetKernelSectionText(const std::string& device, const std::string& kernel_name, std::string& kernel_text);

    // Utility  functions to extract the OpenCL driver version out of the big string
    double GetOpenCLPlatformVersion();

    // Iterate through the device names that the OpenCL driver reported, and remove the names of devices that have not been published yet.
    // This is done only in the CodeXL public version. In CodeXL NDA and INTERNAL versions this function is no-op.
    void RemoveNamesOfUnpublishedDevices(const set<string>& unique_name_published_devices);

    // The number of OpenCL devices.
    size_t opencl_device_count_ = 0;

    // The sorted device table for OpenCL.
    std::vector<GDT_GfxCardInfo> opencl_device_table_;

    // The device names.
    std::set<string> device_names_;

    // Map from device name to ISA Code Object disassembly.
    std::map<string, std::string> device_to_code_object_disassembly_isa_;

    // Map from device name to whole Code Object disassembly.
    std::map<string, std::string> device_to_code_object_disassembly_whole_;

    // Flag set to true if the object is initialized, otherwise false.
    bool is_initialized_ = false;
};

#ifdef _WIN32
    #pragma warning(pop)
#endif

#endif // RGA_RADEONGPUANALYZERBACKEND_SRC_BE_PROGRAM_BUILDER_OPENCL_H_
