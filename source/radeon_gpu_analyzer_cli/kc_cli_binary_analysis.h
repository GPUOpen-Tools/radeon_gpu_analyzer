//=============================================================================
/// Copyright (c) 2024-2025 Advanced Micro Devices, Inc. All rights reserved.
/// @author AMD Developer Tools Team
/// @file
/// @brief Header for class analyzing binary code objects.
//=============================================================================
#ifndef RGA_RADEONGPUANALYZERCLI_SRC_KC_CLI_BINARY_ANALYSIS_H_
#define RGA_RADEONGPUANALYZERCLI_SRC_KC_CLI_BINARY_ANALYSIS_H_

//C++.
#include <memory>

// Backend.
#include "radeon_gpu_analyzer_backend/be_program_builder_vulkan.h"

// Local.
#include "radeon_gpu_analyzer_cli/kc_cli_commander.h"
#include "radeon_gpu_analyzer_cli/kc_data_types.h"
#include "radeon_gpu_analyzer_cli/kc_utils_binary_parser.h"
#include "radeon_gpu_analyzer_cli/kc_utils_binary_default.h"

// Commander interface for binary code objects.
class KcCliBinaryAnalysis
{
public:
    // Maps input file code object to its Binary Anslysis results.
    using Map = std::map<std::string, KcCliBinaryAnalysis>;

    // Default constructor.
    KcCliBinaryAnalysis() = default;

    // Parameterized construction.
    KcCliBinaryAnalysis(std::string asic, std::string binary_codeobj_file, LoggingCallbackFunction callback)
        : asic_(asic)
        , binary_codeobj_file_(binary_codeobj_file)
        , log_callback_(callback)
    {
    }

public:
    // Analyze disassembled codeobject.
    beKA::beStatus AnalyzeCodeObject(const Config& config, const std::string& amdgpu_dis_output);

    // Generates the RGA CLI metadata for Binary Analysis mode that contains the list of output
    // files generated by RGA CLI for that binary.
    bool GenerateSessionMetadataFile(const Config& config) const;

    // Logging Pre Step for binary analysis.
    static void LogPreStep(const std::string& msg, const std::string& device = "");

    // Logging Result for binary analysis.
    static void LogResult(bool result);

    // LoggingBinary analysis error status.
    static void LogErrorStatus(beStatus status, const std::string& err_msg);

private:
    // Parses amdgpu-dis output and detects workflow type (graphics or compute).
    beKA::beStatus DetectAndSetWorkflowStrategy(const std::string& amdgpu_dis_output, bool verbose);

    // Write text disassembly to disk.
    beKA::beStatus WriteFullDisassemblyText(const Config& config, const std::string& amdgpu_dis_output);

    // Parse text disassembly to ISA disassembly file(s).
    beKA::beStatus ParseDisassembly(const Config& config, const std::string& amdgpu_dis_output) const;

    // Parses amdgpu-dis output and extracts a table with
    // the amdgpu kernel name being the key and that shader stage's disassembly the value.
    beKA::beStatus ParseAmdgpudisKernels(const std::string&                  amdgpu_dis_output,
                                         std::map<std::string, std::string>& shader_to_disassembly,
                                         std::string&                        error_msg) const;

    // Write output file(s) to disk.
    beKA::beStatus WriteOutputFiles(const Config& config, const std::map<std::string, std::string>& kernel_to_disassembly, std::string& error_msg) const;

    // Perform post-processing actions.
    void RunPostProcessingSteps(const Config& config) const;

    // Target GPU extracted from dissassembly.
    std::string asic_;

    // Path to binary code object on disk.
    std::string binary_codeobj_file_;

    // Path to dissassembly text file on disk.
    std::string text_disassembly_file_;

    // Code object Metadata extracted from dissassembly.
    BeAmdPalMetaData::PipelineMetaData amdpal_pipeline_md_;

    // Pointer to call ParseAmdgpudisOutput methods - implementation differs for graphics or compute.
    std::unique_ptr<ParseAmdgpudisOutputStrategy> amdgpudis_parser_strategy_ = nullptr;

    // Pointer to call Post Processing methods - implementation differs for graphics or compute.
    std::unique_ptr<BinaryWorkflowStrategy> workflow_strategy_ = nullptr;

    // Log callback function
    LoggingCallbackFunction log_callback_ = nullptr;
};

#endif  // RGA_RADEONGPUANALYZERCLI_SRC_KC_CLI_BINARY_ANALYSIS_H_
